model_params:
  _target_:  SimpleNet

runner_params:
  input_key: image

args:
  expdir: "cv_classification"
  logdir: "./logs/cv_classification"

stages:

  data_params:
    batch_size: 64
    num_workers: 0

  transform_params:
    _target_:  A.Compose
    transforms:
      - _target_:  A.Normalize
        mean: [0.1307]
        std: [0.3081]
      - _target_:  catalyst.ImageToTensor # the same as `C.ToTensor`

  stage_params:
    main_metric: &reduced_metric accuracy01
    minimize_metric: False

  criterion_params:
      _target_:  CrossEntropyLoss

  optimizer_params:
    _target_:  Adam
    lr: 0.001
    weight_decay: 0.0001

  stage1:
    stage_params:
      num_epochs: &num_epochs 100

    scheduler_params:
      _target_:  OneCycleLRWithWarmup
      num_steps: *num_epochs
      lr_range: [0.005, 0.00005]
      warmup_steps: 1
      momentum_range: [0.85, 0.95]

    callbacks_params:
      train_augmentations:
        _wrapper:
          _target_:  ControlFlowCallback
          loaders: train
        _target_:  BatchTransformCallback
        transform:
          - _target_:  kornia.RandomHorizontalFlip
            p: 1.0
          - _target_:  kornia.RandomVerticalFlip
            p: 1.0
        input_key: image
      loss:
        _target_:  CriterionCallback
      optimizer:
        _target_:  OptimizerCallback
      accuracy:
        _target_:  AccuracyCallback
        accuracy_args: [1, 3, 5]
      scheduler:
        _target_:  SchedulerCallback
        reduced_metric: *reduced_metric
      saver:
        _target_:  CheckpointCallback
        save_n_best: 3
