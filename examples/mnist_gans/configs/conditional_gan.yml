runner_params:
  # input keys
  # Note: for albumentations transforms we have to have key "image" =(
  data_input_key: &real_data "image"
  class_input_key: &class_targets "class_targets"
  noise_input_key: &noise_input "noise"

  # output keys
  fake_logits_output_key: &fake_logits "fake_logits"
  real_logits_output_key: &real_logits "real_logits"
  fake_data_output_key: &fake_data "fake_image"

  # condition keys (as this is conditional gan)
  fake_condition_keys: [&class_targets_one_hot "class_targets_one_hot"]
  real_condition_keys: ["class_targets_one_hot"]

  # phases
  generator_train_phase: &generator_train_phase generator_train
  discriminator_train_phase: &discriminator_train_phase discriminator_train
  # model keys:
  generator_model_key: &generator_model_name "generator"
  discriminator_model_key: &discriminator_model_name "discriminator"

model_params:
  _key_value: True
  generator:
    model: SimpleCGenerator
    noise_dim: &noise_dim 16
    num_classes: &num_classes 10
  discriminator:
    model: SimpleCDiscriminator
    num_classes: *num_classes


args:
  expdir: "mnist_gans"
  baselogdir: "./logs/mnist_gans/conditional_gan"


stages:

  transform_params:
    transform: A.Compose
    transforms:
      - transform: AsImage
      - transform: A.Normalize
        mean: [0.5]
        std: [0.5]
      - transform: A.ToTensorV2
      - transform: AdditionalNoiseTensor
        tensor_size: [*noise_dim]
        output_key: *noise_input
      - transform: AdditionalScalar
        value: 1.
        output_key: &real_targets "real_targets"
      - transform: AdditionalScalar
        value: 0.
        output_key: &fake_targets "fake_targets"
      - transform: OneHotTargetTransform
        num_classes: *num_classes
        input_key: *class_targets
        output_key: *class_targets_one_hot

  data_params:
    batch_size: 64
    num_workers: 0

    image_key: *real_data
    target_key: *class_targets

  state_params:
    num_epochs: 100
    main_metric: &reduced_metric loss_g
    minimize_metric: True
    batch_consistant_metrics: False

  criterion_params:
    criterion: BCEWithLogitsLoss

  callbacks_params:
    phase_manager:
      callback: PhaseManagerCallback
      # one of "all" (use all callbacks), "same" (same phases as in train)
      valid_mode: "all"
      train_phases:
        *discriminator_train_phase: 1
        *generator_train_phase: 1

#    prepare_batch_noise:
#      callback: AddBatchNoiseCallback
#      noise_shape: *noise_dim
#
#    prepare_targets_onehot:  TODO
#      callback: OneHotTransformCallback
#      num_classes: *n_classes
#      target_key: "class_targets"
#      one_hot_target_key: "class_targets_one_hot"
#
#    prepare_batch_targets:
#      callback: AddRealFakeTargetsCallback

    loss_g:
      _wrapper: &g_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*generator_train_phase]
      callback: CriterionCallback
      input_key: *real_targets
      output_key: *fake_logits
      prefix: loss_g

    loss_d_real:
      _wrapper: &d_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*discriminator_train_phase]
      callback: CriterionCallback
      input_key: *real_targets
      output_key: *real_logits
      prefix: loss_d_real
    loss_d_fake:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      input_key: *fake_targets
      output_key: *fake_logits
      prefix: loss_d_fake
    loss_d:
      _wrapper: *d_train_wrapper
      callback: MetricAggregationCallback
      metrics: [loss_d_real, loss_d_fake]
      mode: "mean"
      prefix: loss_d

    optim_g:
      _wrapper: *g_train_wrapper
      callback: OptimizerCallback
      optimizer_key: generator
      loss_key: loss_g
    optim_d:
      _wrapper: *d_train_wrapper
      callback: OptimizerCallback
      optimizer_key: discriminator
      loss_key: loss_d

    visualizer:
      callback: VisualizationCallback
      output_keys: *fake_data
      num_rows: 5
      max_images: 25

    saver:
      callback: CheckpointCallback

  stage1:

    optimizer_params:
      _key_value: True
      generator:
        optimizer: Adam
        _model: [*generator_model_name]
        lr: 0.0002
      discriminator:
        optimizer: Adam
        _model: [*discriminator_model_name]
        lr: 0.0002
