runner_params:
  # input keys
  # Note: for albumentations transforms we have to have key "image" =(
  data_input_key: &real_data "image"  # do not change!
  class_input_key: &class_targets "class_targets"
  noise_input_key: &noise_input "noise"
  # output keys
  fake_logits_output_key: &fake_validity "fake_validity"
  real_logits_output_key: &real_validity "real_validity"
  fake_data_output_key: &fake_data "fake_image"
  # phases
  generator_train_phase: &generator_train_phase generator_train
  discriminator_train_phase: &discriminator_train_phase discriminator_train
  # model keys:
  generator_model_key: &generator_model_name "generator"
  discriminator_model_key: &critic_model_name "critic"

common_hyperparams:
  dummy_input_key: &dummy_input_key "image"  # temporary workaround

model_params:
  _key_value: True
  generator:
    model: SimpleGenerator
    noise_dim: &noise_dim 16
  critic:
    model: SimpleDiscriminator


args:
  expdir: "mnist_gans"
  baselogdir: "./logs/mnist_gans/wasserstein_gan"


stages:

  transform_params:
    transform: A.Compose
    transforms:
      - transform: AsImage
      - transform: A.Normalize
        mean: [0.5]
        std: [0.5]
      - transform: A.ToTensorV2
      - transform: AdditionalNoiseTensor
        tensor_size: [*noise_dim]
        output_key: *noise_input

  data_params:
    batch_size: 64
    num_workers: 0

    image_key: *real_data
    target_key: *class_targets

  state_params:
    num_epochs: 100
    main_metric: &reduced_metric loss_g
    minimize_metric: True
    batch_consistant_metrics: False

  criterion_params:
    criterion: MeanOutputLoss

  callbacks_params:
    phase_manager:
      callback: PhaseManagerCallback
      # one of "all" (use all callbacks), "same" (same phases as in train)
      valid_mode: "all"
      train_phases:
        *discriminator_train_phase: 5
        *generator_train_phase: 1

    loss_g:
      _wrapper: &g_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*generator_train_phase]
      callback: CriterionCallback
      input_key: *dummy_input_key  # input key does not matter
      output_key: *fake_validity
      prefix: loss_g
      multiplier: -1.0

    loss_d_real:
      _wrapper: &d_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*discriminator_train_phase]
      callback: CriterionCallback
      input_key: *dummy_input_key  # input key does not matter
      output_key: *real_validity
      prefix: loss_d_real
    loss_d_fake:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      input_key: *dummy_input_key  # input key does not matter
      output_key: *fake_validity
      prefix: loss_d_fake
    loss_d:
      _wrapper: *d_train_wrapper
      callback: MetricAggregationCallback
      mode: "weighted_sum"
      prefix: &loss_d loss_d
      metrics:
        loss_d_real: -1.0
        loss_d_fake: 1.0

    optim_g:
      _wrapper: *g_train_wrapper
      callback: OptimizerCallback
      optimizer_key: generator
      loss_key: loss_g
    optim_d:
      _wrapper: *d_train_wrapper
      callback: WeightClampingOptimizerCallback
      optimizer_key: discriminator
      loss_key: loss_d
      weight_clamp_value: 0.01

    wasserstein_distance:
      _wrapper: *d_train_wrapper
      callback: WassersteinDistanceCallback
      prefix: "wasserstein_distance"
      real_validity_output_key: *real_validity
      fake_validity_output_key: *fake_validity

    visualizer:
      callback: VisualizationCallback
      output_keys: *fake_data
      num_rows: 5
      max_images: 25

    saver:
      callback: CheckpointCallback

  stage1:

    optimizer_params:
      _key_value: True
      generator:
        optimizer: Adam
        _model: [*generator_model_name]
        lr: 0.00005
      discriminator:
        optimizer: Adam
        _model: [*critic_model_name]
        lr: 0.00005
