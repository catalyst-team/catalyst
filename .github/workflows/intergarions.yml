name: intergations
# <- standard block end ->
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - dev
      - develop
      - master


jobs:
  build:
    name: intergations
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]  # windows-2019,
        python-version: [3.6, 3.7, 3.8]
        requirements: ['minimal', 'latest']
        exclude:
          # pypi problems
          - python-version: 3.8
            requirements: 'minimal'
          - python-version: 3.7
            requirements: 'minimal'
          # pickle problems
          - python-version: 3.8
            os: macOS-10.15
          - python-version: 3.6
            os: macOS-10.15

    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2

      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # https://github.com/pytorch/pytorch/issues/20030
      - name: Setup macOS
        if: startsWith(runner.os, 'macOS')
        run: |
          brew install libomp
          brew install gnu-sed

      - name: set minimal dependencies
        if: matrix.requirements == 'minimal'
        run: |
          python -c "req = open('./requirements/requirements.txt').read().replace('>', '=') ; open('./requirements/requirements.txt', 'w').write(req)"
          python -c "req = open('./requirements/requirements-cv.txt').read().replace('>', '=') ; open('./requirements/requirements-cv.txt', 'w').write(req)"
          python -c "req = open('./requirements/requirements-ml.txt').read().replace('>', '=') ; open('./requirements/requirements-ml.txt', 'w').write(req)"
          python -c "req = open('./requirements/requirements-hydra.txt').read().replace('>', '=') ; open('./requirements/requirements-hydra.txt', 'w').write(req)"
          python -c "req = open('./requirements/requirements-optuna.txt').read().replace('>', '=') ; open('./requirements/requirements-optuna.txt', 'w').write(req)"
          python -c "req = open('./requirements/requirements-nifti.txt').read().replace('>', '=') ; open('./requirements/requirements-nifti.txt', 'w').write(req)"

      # https://github.com/actions/cache/blob/master/examples.md
      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: get pip cache dir
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: cache pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip -${{ hashFiles('./requirements/requirements.txt') }} -${{ hashFiles('./requirements/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: cache pip contrib
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip -${{ hashFiles('./requirements/requirements-cv.txt') }} -${{ hashFiles('./requirements/requirements-hydra.txt') }} -${{ hashFiles('./requirements/requirements-ml.txt') }} -${{ hashFiles('./requirements/requirements-optuna.txt') }} -${{ hashFiles('./requirements/requirements-mlflow.txt') }} -${{ hashFiles('./requirements/requirements-nifti.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-contrib

      - name: install dependencies
        run: |
          # python -m pip install --upgrade --user pip
          pip install -r ./requirements/requirements.txt -r ./requirements/requirements-cv.txt -r ./requirements/requirements-dev.txt -r ./requirements/requirements-hydra.txt -r ./requirements/requirements-ml.txt -r ./requirements/requirements-optuna.txt -r ./requirements/requirements-mlflow.txt -r ./requirements/requirements-mlflow.txt
          python --version
          pip --version
          pip list
        shell: bash
# <- standard block end ->

      - name: check examples
        env:
          REQUIREMENTS: ${{ matrix.requirements }}
        run: |
          pip install -e .
          bash bin/workflows/check_projector.sh
          bash bin/workflows/check_settings.sh
