name: catalyst-tune
# <- standard block end ->
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - develop
      - master


jobs:
  build:
    name: dl-cpu-core-tune
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # max-parallel: 6
      matrix:
        os: [ubuntu-18.04]  # macOS-10.15, windows-2019,
        python-version: [3.8]  # 3.6, 3.7,
        requirements: ['latest']  # 'minimal',
        exclude:
          # pypi problems
          - python-version: 3.8
            requirements: 'minimal'
          - python-version: 3.7
            requirements: 'minimal'
          # pickle problems
          - python-version: 3.8
            os: macOS-10.15
          - python-version: 3.6
            os: macOS-10.15

    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2

      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # https://github.com/pytorch/pytorch/issues/20030
      - name: Setup macOS
        if: startsWith(runner.os, 'macOS')
        run: |
          brew install libomp
          brew install gnu-sed

      - name: set minimal dependencies
        if: matrix.requirements == 'minimal'
        run: |
          python -c "req = open('./requirements/requirements.txt').read().replace('>', '=') ; open('./requirements/requirements.txt', 'w').write(req)"
          python -c "req = open('./requirements/requirements-cv.txt').read().replace('>', '=') ; open('./requirements/requirements-cv.txt', 'w').write(req)"
          python -c "req = open('./requirements/requirements-nlp.txt').read().replace('>', '=') ; open('./requirements/requirements-nlp.txt', 'w').write(req)"

      # https://github.com/actions/cache/blob/master/examples.md
      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: get pip cache dir
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requirements }}-pip-${{ hashFiles('./requirements/requirements.txt') }}-${{ hashFiles('./tests/requirements.txt') }}-${{ hashFiles('./requirements/requirements-cv.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requirements }}-pip-

      - name: install dependencies
        run: |
          # python -m pip install --upgrade --user pip
          pip install -r ./requirements/requirements.txt -r ./tests/requirements.txt  -r ./requirements/requirements-cv.txt --quiet --find-links https://download.pytorch.org/whl/cpu/torch_stable.html --upgrade-strategy only-if-needed
          python --version
          pip --version
          pip list
        shell: bash
# <- standard block end ->

      - name: check examples
        env:
          REQUIREMENTS: ${{ matrix.requirements }}
        run: bash ./bin/tests/check_core_tune.sh
